10
myFoldl (\acc x -> acc + length x) 0 ["hello", "world", "haskell"]
myFoldl (*) 2 [3, 4, 5]
myFoldl (\acc x -> acc * 2 + x) 0 [1, 2, 3]
myFoldl (&&) True [True, False, True]
myFoldl (\acc x -> acc + (if x > 0 then x else 0)) 0 [-1, 2, -3, 4]

10
myFoldl (\acc x -> acc + (if x > 0 then x else 0)) 0 [-1, 2, -3, 4]
myFoldr (*) 1 [1, 2, 3, 4]
myFoldr (\x acc -> x : acc) [] [1, 2, 3, 4]
myFoldr (&&) True [True, False, True]
myFoldr (\x acc -> acc ++ show x) "" [1, 2, 3, 4]

20
alternativeMap (+1) (*2) []
alternativeMap (++ "!") (++ "?") ["a"]
alternativeMap (^2) (^3) [1]
alternativeMap (++ "!") (++ "?") ["a", "b", "c", "d"]
alternativeMap (\x -> x * 10) (\x -> x + 100) [1..5]
alternativeMap (show) (\x -> show (x * 10)) [1, 2, 3, 4]
alternativeMap (++ "!!") (++ "??") ["hello", "world", "haskell"]
alternativeMap (not) (\x -> x && True) [True, False, True, False]
alternativeMap (\x -> x + 1) (\x -> x - 1) [10, 20, 30, 40]
alternativeMap (\x -> x * 0) (\x -> x * 1) [5, 10, 15, 20]

20
myLength []
myLength [True]
myLength [1, 2, 3, 4, 5]
myLength ["foldr", "test", "haskell"]
myLength [[1,2], [3], [], [4,5,6]]

20
myFilter even []
myFilter even [2, 4, 6, 8]
myFilter (< 0) [1, 2, 3]
myFilter (\x -> x `mod` 3 == 0) [1, 3, 5, 6, 9, 10]
myFilter (\s -> length s > 3) ["cat", "test", "haskell", "no"]
myFilter id [True, False, True, False]
myFilter (== 10) [10]
myFilter (== 5) [8]
myFilter even [3, 1, 4, 1, 5, 9, 2]
myFilter (\s -> 'a' `elem` s) ["apple", "banana", "cherry", "dog"]

20
sumsqeven []
sumsqeven [2, 4, 6]
sumsqeven [1, 3, 5]
sumsqeven [-2, 1, 3, 4]
sumsqeven [0]